Primero, se explica que es un MCC (Mutually connected components)(Componentes mutuamente conectados).
Luego, se menciona que hasta la creación del paper, no existía un algoritmo eficiente para obtener datos o 
estadisticas de todos los MCC durante la eliminación de los links.

Después, se dice que se usará un "fully dynamic graph algorithm" que se llama "HDT algorithm hereafter".
Dice que, para cada capa de la red, en la que un componente no es un arból se cambia a un arból de expansión (spanning tree), se guarda la información del perfil en Euler Tour Tree, ya que pueden manejar eficientemente la separación o unión de arboles de expansión, pero que cuando ocurre una eliminación de links y se necesita información de los links redundantes entre nodos organizada de manera apropiada, el algoritmo HDT es una forma de mantener esta información. Asegura un orden del tipo O(log^2(N)) tiempo para la creación o eliminación de links cuando el ET es usado por la data structure del spanning tree.

Se presenta un algoritmo y se introducen unos pre-requisitos para explicar el "dynamic graph algorithm", se dice que los ET (Euler Tree) constituyen un dynamic forest (DF)
denota como F, el cual puede realizar las siguientes operaciones: Connected(v,w,F), Size(v,F), Insert(e,F) y Delete(e,F).

Diciendo que estas operaciones se pueden realizar en O(log^2(N)) usando el algoritmo HDT y que cada link se categoriza en activo o inactivo.

Sea una red múltiplex de doble capa con N nodos en cada capa, con La y Lb los set de links presentes en las capas A y B, respectivamente. Los DFs en cada red son Fa y Fb. Cada Fx almacena la estructura de los MCCs de la capa X conteniendo información de conexión de los links activos.
Se presenta el algoritmo para eliminación de links entre MCC:

(i)Para una configuración inicial de una capa de la red, se extrae un spanning tree aleatorio de cada componente, basado en como está construido el DF Fx (X = {A,B}),
obteniendo el perfil de conexión de cada red con Connect(v,w,F).

(ii)Para identificar MCCs, se agregan ad hoc links (líneas intermitentes) entre arboles desconectados, es decir, agregando ad hoc links a Fx. Se denota Dx como todos
los ad hoc links en la capa X. Siendo el set de links activos Ax = Lx U Dx , y el set de links inactivos se convierte en Lx = ∅.

(iii)Se elige un ad hoc link aleatorio de Da y se quita del grafo. Si e pertence a La, se quita de e de La. Este caso puede que no ocurra en el inicio, pero puede ocurrir durante el proceso iterativo. Si e no pertenece a La, se ejecuta Delete(e=(v,w),Fa). Si no existe otra ruta que conecte v con w, el componente se dividirá en dos. Se puede revisar la conexión de v y w con Connect(v,w,Fa), después de eliminar e.

(iv)Debido al proceso de división en una capa, puede desencadenar que algunos links activos en la otra capa se vuelvan inactivos. Para cada uno de esos links inactivos e, se ejecuta Delete(e,Fx) y se agrega a Lx. Esta eliminación, puede desencadenar que otros links de Ay se vuelvan inactivos, por lo que se repite el proceso de manera iterativa, donde la capa Y representa una capa homóloga de X.

(v)Se repiten los pasos (iii) y (iv) hasta que Da=∅ y Db=∅.

Terminada esta primera parte, todos los MCCs de una red múltiplex dada han sido identificados y se puede obtener su información estructural, tales como el tamaño de cada MCCs de Fx (X = {A,B}).

(vi)Repetir los pasos (iii) y (iv) en La y Lb en vez de en Da y Db. Este proceso se repite hasta que el número de links eliminados alcance el valor deseado.

De esta forma, el paso (vi) contiene el proceso de eliminación de links activos de las redes originales.

Evaluación

Se usarán 3 tipos de redes múltiplex doble capas: (i) grafos aleatorios propuestos por Erdös and Rényi, (ii) grafos aleatorios scale-free, en donde el grado de un nodo en una capa es igual al grado del nodo correspondiente en la otra capa, y (iii) lattices regulares de dos dimensiones.
En donde, en cada tipo de red, el tamaño de un MCC gigante y el número de MCCs están medidos en función del mean degree. El cual está dado por k = 2L/N , donde L es el número de links que quedan en La o Lb en cada paso de la iteración, donde La = Lb. Para comparar los resultado de manera consistente, las redes se iniciaron con K=4.

Para los grafos ER, el parámetro de orden exhibe un salto de P∞Jump ≈ 0.51 con Kc ≈ 2.46, valores los cuales están de acuerdo con los resultados.
Para las scale-free networks, el tamaño del salto disminuye mientras que el degree exponent γ disminuye a 3. Para γ <=3, la transición es continua y no hay saltos obtenidos. Este resultado también consistente con los resultados obtenidos usando el algoritmo convencional aún cuando se eliminan nodos en este.
Para las lattices regulares de dos dimensiones se realizaron simulaciones similares. Se obtuvo el punto de transición Kc≈ 2.29, correspondiente a la probabilidad de ocupación Pc ≈ 0.57 en un esquema convencional.

También se examinó el número Nc de MCCs divididos por el tamaño del sistema, s=Nc/N.
Para ER y redes scale-free, s tiene un comportamiento similar a P∞, pero al revés.
Sin embargo, para lattices regulares de dos dimensiones es diferente. La revisión del comportamiento de s VS k en sistemas tan grandes no sería posible a menos que el algoritmo sea aplicado.

La complejidad del algoritmo
El paso (v) fuerza a que se repitan los pasos (iii) y (iv) O(N) veces y por cada paso (iii) y (iv), se ejecuta la función Delete al menos una vez.
Estos pasos requieren de un tiempo de computación de O(N log^2 N).
Sin embargo, cuando un link es eliminado, muchos otros links pueden cambiarse a inactivos, induciendo en cascada la eliminación en ida y vuelta en ambas capas. Así mismo, es posible que no induzca ningun proceso de inactivación.
Estos procesos complicados dificultan la extracción del tiempo de complejidad.

De esta forma, para estimar el tiempo de complejidad se recurre a métodos númericos.
Para medir el tiempo de computación total T para realizar un seguimiento de los MCC de K=4 a 1 para los tres tipos de redes adyacentes.
Para ER y redes scale-free, es probable que el degree exponent γ no afecte el tiempo de complejidad k>=3, pero el factor constante puede variar.
El tiempo de complejidad depende del tamaño del sistema como O(N^1.2) para las redes complejas. Para lattices regulares de dos dimensiones, el tiempo de complejidad estimado es O(N^1.3). Esta diferencia númerica puede ser causada por la naturaleza de los fallos en avalancha dependiendo de la estructura de la red adyacente.

Aparte del comportamiento de power-law, se puede esperar que las correciones logaritmicas afectadas por las cuatro operaciones de la estructura de los DF, pero no es claramente conclusiva.

Resumen

Se introdujo un algoritmo eficiente que realiza un seguimiento a los MCCs en una red mútiplex interdependiente, que mantiene la información estructural de los MCCs durante la eliminación y que permite extraer información, como el tamaño del MCC más grande o de los otros MCCs.

Se presento algoritmo similar, pero que eliminaba nodos en vez de links, lo que provoca que se eliminen multiples links a la vez y con un menor tiempo al algoritmo principal del paper, con un tiempo de complejidad de O(N log N). Pero solo fue diseñado para el encontrar solo el grupo más grande. En cambio, el algoritmo principal provee de información útil sobre las características estructurales de los MCCs. Con lo que se puede anticipar que puede facilitar estudios en varias direcciones.

Para terminar, se dice que el algoritmo HDT utilizado se puede aplicar en otros problemas como en modeslos de redes temporales.